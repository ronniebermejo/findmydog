# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.

require 'simplecov'
require 'cucumber/rails'

Dir[File.dirname(__FILE__) + '/*.rb'].each { |f| require f }
Dir[File.expand_path('../../../spec/support/*.rb', __FILE__)].each { |f| require f }

Capybara.default_selector = :css
Capybara.default_wait_time = 5
require 'capybara/poltergeist'
Capybara.javascript_driver = :poltergeist


include SnapshotGeneration

# Capybara defaults to CSS3 selectors rather than XPath.
# If you'd prefer to use XPath, just uncomment this line and adjust any
# selectors in your step definitions to use the XPath syntax.
# Capybara.default_selector = :xpath

# By default, any exception happening in your Rails application will bubble up
# to Cucumber so that your scenario will fail. This is a different from how 
# your application behaves in the production environment, where an error page will 
# be rendered instead.
#
# Sometimes we want to override this default behaviour and allow Rails to rescue
# exceptions and display an error page (just like when the app is running in production).
# Typical scenarios where you want to do this is when you test your error pages.
# There are two ways to allow Rails to rescue exceptions:
#
# 1) Tag your scenario (or feature) with @allow-rescue
#
# 2) Set the value below to true. Beware that doing this globally is not
# recommended as it will mask a lot of errors for you!
#
ActionController::Base.allow_rescue = false

# Remove/comment out the lines below if your app doesn't have a database.
# For some databases (like MongoDB and CouchDB) you may need to use :truncation instead.
begin
  DatabaseCleaner.strategy = :transaction
rescue NameError
  raise "You need to add database_cleaner to your Gemfile (in the :test group) if you wish to use it."
end

# You may also want to configure DatabaseCleaner to use different strategies for certain features and scenarios.
# See the DatabaseCleaner documentation for details. Example:
#
#   Before('@no-txn,@selenium,@culerity,@celerity,@javascript') do
#     # { :except => [:widgets] } may not do what you expect here
#     # as Cucumber::Rails::Database.javascript_strategy overrides
#     # this setting.
#     DatabaseCleaner.strategy = :truncation
#   end
#
#   Before('~@no-txn', '~@selenium', '~@culerity', '~@celerity', '~@javascript') do
#     DatabaseCleaner.strategy = :transaction
#   end
#

# Possible values are :truncation and :transaction
# The :transaction strategy is faster, but might give you threading problems.
# See https://github.com/cucumber/cucumber-rails/blob/master/features/choose_javascript_database_strategy.feature
Cucumber::Rails::Database.javascript_strategy = :truncation


Capybara.configure do |config|

  #config.run_server = false
  #config.app_host = "https://#{APPLIANCE_IP}/"
  config.default_driver = :poltergeist
  config.javascript_driver = :poltergeist
  config.default_wait_time = 15


  #ambigous match
  config.match = :prefer_exact
end


Capybara.register_driver :poltergeist do |app|
  Capybara::Poltergeist::Driver.new(
      app,
      window_size: [1280, 1024],
      debug: false,
      js_errors: false,
      timeout: 20,
      phantomjs: '/usr/local/Cellar/phantomjs/1.9.7/bin/phantomjs',
      phantomjs_options: ['--load-images=yes', '--disk-cache=false', '--ignore-ssl-errors=yes'],
      inspector: false
  )
end

After do |scenario|
  screen_png = SnapshotGeneration::save_window_png(page, scenario)
  if screen_png
    embed(screen_png, "image/png", "view image")
    if scenario.failed?
     # if PRINT_PNG_WHEN_FAIL
        system("open #{screen_png}")
     # end
    end
  end

end


